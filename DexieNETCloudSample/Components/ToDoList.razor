
<MudCard Class="mt-16">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.List" />
            </MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.h3" GutterBottom="true">ToDoList</MudText>
            @if (Service.Exceptions.Any())
            {
                <MudText Class="mt-4" Color="Color.Error">Error: @Service.Exceptions.First().Exception.Message</MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Service.IsDBOpen)
            {
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudFabPRx Class="mr-2" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" StateTransformer=@Scope.AddItem ValueFactoryAsync=@(st => AddOrUpdate(st, null)) />
                    <MudFabRx Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" ConfirmExecutionAsync=@(() => ConfirmDelete(DeleteType.All)) StateProvider=@Scope.ClearItems />
                </MudHidden>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (Service.IsDBOpen)
        {
            @if (Service.Invites.Any())
            {
                <InvitesForm />
            }

            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudContainer Class="ml-n3 mb-8">
                    <MudFabPRx Class="mr-2" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" StateTransformer=@Scope.AddItem ValueFactoryAsync=@(st => AddOrUpdate(st, null)) />
                    <MudFabRx Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" ConfirmExecutionAsync=@(() => ConfirmDelete(DeleteType.All)) StateProvider=@Scope.ClearItems />
                </MudContainer>
            </MudHidden>
            <MudTable T="ToDoDBList" Items=@(Service.ToDoLists)>
                <ColGroup>
                    <col style="width:50px;" />
                    <col />
                    <col style="width:50px;" />
                    <col style="width:50px;" />
                    <col style="width:50px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Style="text-align:center">
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" />
                    </MudTh>
                    <MudTh>ToDoList</MudTh>
                    <MudTh Style="text-align:center">
                        <MudIcon Icon="@Icons.Material.Filled.Share" />
                    </MudTh>
                    <MudTh Style="text-align:center">
                        <MudIcon Icon="@Icons.Material.Filled.Edit" />
                    </MudTh>
                    <MudTh Style="text-align:center">
                        <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.Delete" />
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ToggleItemOpenClose" Style="text-align:center">
                        <MudButtonPRx Color="Color.Info" StartIcon=@(Service.IsListItemsOpen(context) ? Icons.Material.Filled.KeyboardArrowDown : Icons.Material.Filled.KeyboardArrowRight)
                            Context=@context StateTransformer=@Scope.ToggleListItemsOpenClose ValueFactoryAsync=@(st => Task.FromResult(context)) />
                    </MudTd>
                    <MudTd DataLabel="ToDoList"><MudText>@context.Title</MudText></MudTd>
                    <MudTd DataLabel="Share" Style="text-align:center">
                        <MudIconButtonPRx Color="Color.Info" Icon=@(Service.IsListShareOpen(context) ? Icons.Material.TwoTone.Share : Icons.Material.Filled.Share)
                            Context=@context StateTransformer=@Scope.ToggleListShareOpenClose ValueFactoryAsync=@(st => Task.FromResult(context)) />
                    </MudTd>
                    <MudTd DataLabel="Edit" Style="text-align:center">
                        <MudIconButtonPRx Color="Color.Info" Icon=@Icons.Material.Filled.Edit
                            Context=@context StateTransformer=@Scope.UpdateItem ValueFactoryAsync=@(st => AddOrUpdate(st, context)) />
                    </MudTd>
                    <MudTd DataLabel="DeleteItem" Style="text-align:center">
                        <MudIconButtonPRx Color="Color.Error" Icon=@Icons.Material.Filled.Delete
                            Context=@context StateTransformer=@Scope.DeleteItem ValueFactoryAsync=@(st => DeleteList(st, context)) />
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    @if (Service.IsListItemsOpen(context))
                    {
                        @if (Service.IsListShareOpen(context))
                        {
                            <MudTr>
                                <td colspan="4">
                                    <RxBLServiceScope TScope=@ToDoListMemberService.Scope TService=@ToDoListMemberService>
                                        <Share List=@context />
                                    </RxBLServiceScope>
                                </td>
                            </MudTr>
                        }
                        <MudTr>
                            <td colspan="4">
                                <RxBLServiceScope TScope=@ToDoItemService.Scope TService=@ToDoItemService>
                                    <ToDoItem List=@context />
                                </RxBLServiceScope>
                            </td>
                        </MudTr>
                    }
                </ChildRowContent>
            </MudTable>
        }
        else// if (false)
        {
            <MudProgressLinear Indeterminate="true" Color="Color.Default" Rounded="true" Size="Size.Medium" Class="my-7" />
        }
    </MudCardContent>
</MudCard>