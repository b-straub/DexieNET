@using DexieNET
@inherits RxBLServiceSubscriber<ToDoListService>

<MudTable Class="my-2" T="Invite" Items=@(DBService.Invites.Value)>
    <ColGroup>
        <col />
        <col style="width:50px;" />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Invitations</MudTh>
        <MudTh Style="text-align:center">
            <MudIcon Icon="@Icons.Material.Outlined.AddCircleOutline" />
        </MudTh>
        <MudTh Style="text-align:center">
            <MudIcon Icon="@Icons.Material.Outlined.RemoveCircleOutline" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Invite">
            <MudText>@GetInviteText(context)</MudText>
        </MudTd>
        <MudTd DataLabel="Accept" Style="text-align:center">
            <MudIconButtonRx Color="Color.Success" Icon=@Icons.Material.Outlined.AddCircleOutline
                StateCommand=@Service.CommandAsync CanChangeCallback=@ToDoListService.CanAcceptInvite(context)
                ExecuteCallback=@Service.AcceptInvite(context) ConfirmExecutionAsync=@(async () => await
                ConfirmInvite(true)) />
        </MudTd>
        <MudTd DataLabel="Reject" Style="text-align:center">
            @if (ToDoListService.CanRejectInvite(context)())
            {
                <MudIconButtonRx Color="Color.Error" Icon=@Icons.Material.Outlined.RemoveCircleOutline
                    StateCommand=@Service.CommandAsync
                    ExecuteCallback=@Service.RejectInvite(context) ConfirmExecutionAsync=@(async () => await
                    ConfirmInvite(false)) />
            }
            else
            {
                <MudIconButtonAsyncRx Color="Color.Error" Icon=@Icons.Material.Outlined.ExitToApp
                    StateCommand=@Service.CommandAsync
                    ExecuteAsyncCallback=@Service.DeleteMember(context.Id) ConfirmExecutionAsync=@(async () => await
                    ConfirmInvite(false, true)) />
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Inject]
    public required DexieCloudService DBService { get; init; }

    [Inject]
    public required IDialogService DialogService { get; init; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private string GetInviteText(Invite? invite)
    {
        ArgumentNullException.ThrowIfNull(invite);
        ArgumentNullException.ThrowIfNull(invite.InvitedBy);
        ArgumentNullException.ThrowIfNull(invite.Realm);

        return $"'{invite.Name}' from '{invite.InvitedBy.UserId}' for '{invite.Realm.Name}'";
    }

    private async Task<bool> ConfirmInvite(bool accept, bool delete = false)
    {
        var message = accept ? "Accept Invitation" : delete ? "Delete Invitation" : "Reject Invitation";
        var button = accept ? "Accept" : delete ? "Delete" : "Reject";

        var parameters = new DialogParameters
            { ["Message"] = message, ["ConfirmButton"] = button, ["SuccessOnConfirm"] = accept };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Invitation", parameters);

        var res = await dialog.Result;

        return res.OK();
    }
}
