@using System.Text.Json
@inherits RxBLServiceSubscriber<DexieCloudService>
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudStack Row=@true>
    <MudIcon Icon=@GetStatusIcon(Service.SyncState)/>
    <MudIcon Icon=@GetPhaseIcon(Service.SyncState)/>
</MudStack>
<MudSpacer/>
<HandleLicense/>
<MudSpacer/>
<HandleLogin/>
<MudSpacer/>
<HandlePush/>
<MudSpacer/>

@code {

    [Inject]
    public required IDialogService DialogService { get; init; }

    [Inject]
    public required IConfiguration Configuration { get; init; }

    private PushPayload? _pushPayload;
    
    protected override async Task OnServiceStateHasChangedAsync(IEnumerable<ServiceChangeReason> crList)
    {
        foreach (var cr in crList)
        {
            switch (cr.ID)
            {
                case var value when value == Service.UIInteraction.ID:
                    if (Service.DB is not null && Service.UIInteraction.HasValue())
                    {
                        bool res = await Authenticate.HandleUIInteraction(Service.DB, Service.UIInteraction.Value, DialogService);
                        if (Service.UIInteraction.Value.Type is UIInteraction.InteractionType.LOGOUT_CONFIRMATION && res)
                        {
                            await Service.DB.Logout(true);
                        }
                    }

                    break;
                case var value when value == Service.ServiceWorkerNotificationState.ID:
                {
                    if (Service.DB is not null && Service.ServiceWorkerNotificationState.HasValue())
                    {
                        switch (Service.ServiceWorkerNotificationState.Value.State)
                        {
                            case ServiceWorkerState.UpdateFound:
                                ShowUpdate();
                                break;
                            case ServiceWorkerState.ReloadPage:
                                NavigationManager.NavigateTo(NavigationManager.Uri, true);
                                break;
                        }
                    }
                }
                    break;

                case var value when value == Service.NotificationsState.ID:
                    if (Service.DB is not null && Service.NotificationsState.Value == NotificationState.UnsubscribedRemote)
                    {
                        ShowUnsubscribedRemote();
                    }

                    break;

                case var value when value == Service.PushPayloadEventState.ID && Service.PushPayloadEventState.HasValue():
                {
                    _pushPayload = Service.PushPayloadEventState.Value;
                }

                    break;
            }
        }

        if (Service.State.Value is DBState.Closed)
        {
            await OpenDB();
        }
    }

    private async Task OpenDB()
    {
        try
        {
            var hostURL = new Uri(NavigationManager.Uri).GetLeftPart(UriPartial.Path);
            var pushUrl = new Uri(new Uri(hostURL), Configuration.GetRouteFolder().TrimEnd('/') + PushConstants.PushRoute);
           
            await Service.OpenDB();
            ArgumentNullException.ThrowIfNull(Service.DB);

            await Service.ConfigureCloud(Configuration.GetDBUrl(), pushUrl.ToString(), Configuration.GetApplicationServerKey());
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }

    private string GetPhaseIcon(IState<SyncState?> state)
    {
        if (!state.HasValue())
        {
            return Icons.Material.Outlined.QuestionMark;
        }

        return state.Value.Phase switch
        {
            SyncState.SyncStatePhase.INITIAL => Icons.Material.Outlined.QuestionMark,
            SyncState.SyncStatePhase.OFFLINE => Icons.Material.Outlined.CloudOff,
            SyncState.SyncStatePhase.NOT_IN_SYNC => Icons.Material.Outlined.CloudOff,
            SyncState.SyncStatePhase.IN_SYNC => Icons.Material.Outlined.CloudDone,
            SyncState.SyncStatePhase.PULLING => Icons.Material.Outlined.CloudDownload,
            SyncState.SyncStatePhase.PUSHING => Icons.Material.Outlined.CloudUpload,
            SyncState.SyncStatePhase.ERROR => Icons.Material.Outlined.CloudOff,
            _ => throw new ArgumentOutOfRangeException(nameof(state.Value.Phase))
        };
    }

    private string GetStatusIcon(IState<SyncState?> state)
    {
        if (!state.HasValue())
        {
            return Icons.Material.Filled.QuestionMark;
        }

        return state.Value.Status switch
        {
            SyncState.SyncStatus.NOT_STARTED => Icons.Material.Filled.QuestionMark,
            SyncState.SyncStatus.CONNECTING => Icons.Material.Filled.SignalWifi0Bar,
            SyncState.SyncStatus.CONNECTED => Icons.Material.Outlined.SignalWifi4Bar,
            SyncState.SyncStatus.DISCONNECTED => Icons.Material.Filled.SignalWifiStatusbarConnectedNoInternet4,
            SyncState.SyncStatus.ERROR => Icons.Material.Filled.SignalWifiOff,
            SyncState.SyncStatus.OFFLINE => Icons.Material.Filled.SignalWifiOff,
            _ => throw new ArgumentOutOfRangeException(nameof(state.Value.Status))
        };
    }

    private Snackbar? _updateSnackBar;

    private void ShowUpdate()
    {
        _updateSnackBar = Snackbar.Add(
            @<div>
                <MudStack>
                    <MudText Typo=@Typo.body2>"An update for this application is available!"</MudText>
                    <MudButton Variant=@Variant.Filled Color=@Color.Warning OnClick=@UpdateApp>Update</MudButton>
                </MudStack>
            </div>
            , Severity.Success, config =>
            {
                config.RequireInteraction = true;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            });
    }

    private Snackbar? _subscribeSnackBar;

    private void ShowUnsubscribedRemote()
    {
        _subscribeSnackBar = Snackbar.Add(
            @<div>
                <MudStack>
                    <MudText Typo=@Typo.body2>"The notificaton subscription has been cancelled remotely!"</MudText>
                    <MudButton Variant=@Variant.Filled Color=@Color.Warning OnClick=@SubscribePush>Subscribe</MudButton>
                </MudStack>
            </div>
            , Severity.Success, config =>
            {
                config.RequireInteraction = true;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            });
    }

    private async Task SetSelectedItem((string ListID, string ItemID) pushItem)
    {
        if (Service.DB is not null)
        {
            await Service.OpenList(pushItem.ListID);
        }
    }
    
    private async Task HandlePushPayload()
    {
        ArgumentNullException.ThrowIfNull(Service.DB);
        ArgumentNullException.ThrowIfNull(_pushPayload);
        
        Snackbar.Add($"Push Notification, ListID {_pushPayload.ListID}, ItemID {_pushPayload.ItemID}", Severity.Info, config => { config.RequireInteraction = false; });
        await Service.OpenList(_pushPayload.ListID);
    }

    private async Task UpdateApp()
    {
        if (_updateSnackBar is not null)
        {
            Snackbar.Remove(_updateSnackBar);
            _updateSnackBar = null;
        }

        ArgumentNullException.ThrowIfNull(Service.DB);
        await Service.DB.UpdateServiceWorker();
    }

    private async Task SubscribePush()
    {
        if (_subscribeSnackBar is not null)
        {
            Snackbar.Remove(_subscribeSnackBar);
            _subscribeSnackBar = null;
        }

        ArgumentNullException.ThrowIfNull(Service.DB);
        await Service.SubscribePush();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (!firstRender && _pushPayload is not null)
        {
            await HandlePushPayload();
            _pushPayload = null;
        }
    }
}