@using DexieNET
@inherits OwningComponentBase

<MudTooltip Text=@GetLicenseTooltip()>
    <MudIcon Icon=@GetLicenseIcon() />
</MudTooltip>

@if (_userLogin?.License is not null && (_userLogin.License.Status is not LicenseStatus.OK || _userLogin.License.EvalDaysLeft < 7))
{
    <MudMenu>
        <ActivatorContent>
            <MudIconButton Icon="@Icons.Material.Outlined.Payment" Color="Color.Inherit">
                "Handle license"
            </MudIconButton>
        </ActivatorContent>
        <ChildContent>
            @if (_userLogin.License.Status is not LicenseStatus.OK)
            {
                <MudMenuItem OnClick=@DeleteAccount OnTouch=@DeleteAccount>Delete account for: @_userLogin.UserId</MudMenuItem>
            }
            @if (_userLogin.License.Status is LicenseStatus.EXPIRED || _userLogin.License.EvalDaysLeft < 7)
            {
                <MudMenuItem OnClick=@BuyLicense OnTouch=@BuyLicense>Buy license for: @_userLogin.UserId</MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
}

@code {
    [Inject]
    private DexieCloudService? DBService { get; set; }

    [Inject]
    private IDialogService? DialogService { get; set; }

    [Inject]
    private HttpClient? HttpClient { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private UserLogin? _userLogin;
    private IDisposable? _sDisposable;
    private IEnumerable<string> users = Enumerable.Empty<string>();

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(DBService);

        _sDisposable = DBService.Subscribe(c =>
        {
            if (c is DBChangedMessage.UserLogin)
            {
                _userLogin = DBService.UserLogin;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _sDisposable?.Dispose();
        }

        base.Dispose(disposing);
    }

    private async Task DeleteAccount()
    {
        ArgumentNullException.ThrowIfNull(HttpClient);
        ArgumentNullException.ThrowIfNull(DialogService);
        ArgumentNullException.ThrowIfNull(_userLogin);
        ArgumentNullException.ThrowIfNull(DBService?.CloudURL);

        var message = $"Are you sure you want to delete your user completely along all stored data for {_userLogin.UserId}? Private data will be deleted. Shared data will not be deleted. This action cannot be undone.";
        var button = "Delete user";

        var parameters = new DialogParameters
            { ["Message"] = message, ["ConfirmButton"] = button, ["SuccessOnConfirm"] = false };
        var dialog = DialogService.Show<ConfirmDialog>($"Delete {_userLogin.UserId}", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return;
        }

        using var request = new HttpRequestMessage(HttpMethod.Delete,
            $"{DBService.CloudURL}/users/{_userLogin.UserId}");
        request.Headers.Add("Authorization", $"Bearer {_userLogin.AccessToken}");

        using var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            await DialogService.ShowMessageBox("Delete user", "User could not be deleted!");
        }
        else
        {
            await DBService.Logout(true);
        }
    }

    private async Task BuyLicense()
    {
        ArgumentNullException.ThrowIfNull(DialogService);
        await DialogService.ShowMessageBox("Buy license", "Implement your buying process here.");
    }

    private string GetLicenseIcon()
    {
        @if (_userLogin?.License is null)
        {
            return Icons.Material.Outlined.QuestionMark;
        }

        return _userLogin.License.Type switch
        {
            LicenseType.DEMO => Icons.Material.Outlined.Quiz,
            LicenseType.EVAL => Icons.Material.Outlined.AddShoppingCart,
            LicenseType.PROD => Icons.Material.Outlined.Paid,
            LicenseType.CLIENT => Icons.Material.Outlined.AccountBalance,
            _ => throw new ArgumentOutOfRangeException(nameof(_userLogin.License.Type))
        };
    }

    private string GetLicenseTooltip()
    {
        @if (_userLogin?.License is null)
        {
            return "No user logged in.";
        }

        @if (_userLogin.License.Type is LicenseType.DEMO)
        {
            return "You are in demonstration mode.";
        }

        @if (_userLogin.License.Type is LicenseType.EVAL)
        {
            return $"You are in evaluation mode. {_userLogin.License.EvalDaysLeft} days left.";
        }

        @if (_userLogin.License.Type is LicenseType.PROD)
        {
            return $"You have a valid purchased license.";
        }

        @if (_userLogin.License.Type is LicenseType.CLIENT)
        {
            return $"You have a valid site license.";
        }

        return _userLogin.License.Status switch
        {
            LicenseStatus.OK => "You have a valid license.",
            LicenseStatus.EXPIRED => "Your license has expired.You are in offline mode until a valid license is purchased.",
            LicenseStatus.DEACTIVATED => "Your license has been deactivated.You are in offline mode until a valid license is purchased.",
            _ => "You have no valid license.You are in offline mode until a valid license is purchased."
        };
    }
}
