@inherits RxBLStateSubscriber<ToDoItemService.ToDoItemItemInput>

<MudDialog ContentStyle="width: 400px; height: 400px">
    <DialogContent>
        <EditForm Model=@Owner OnValidSubmit="OnValidSubmit">
            <MudCard>
                <MudCardContent>
                    <MudFocusTrap>
                        <MudTextFieldRx State=@Owner.Text Validation=@ToDoItemService.ToDoItemItemInput.ValidateText CanChangeCallback=@Owner.CanUpdateText AutoFocus="true" Immediate="true" Label="ToDo" />
                        <MudDatePickerRx State=@Owner.DueDateDate Validation=@ToDoItemService.ToDoItemItemInput.ValidateDueDate CanChangeCallback=@Owner.CanUpdateDueDate Label="Due Date" Editable="true" />
                        <MudTimePickerRx PickerVariant=@PickerVariant.Dialog State=@Owner.DueDateTime Validation=@Owner.ValidateDueDateTime CanChangeCallback=@Owner.CanUpdateTime />
                    </MudFocusTrap>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled=@(!Owner.CanSubmit()) ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color=@Color.Success Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; init; }

    [Parameter]
    public required ToDoDBItem? Item { get; init; }
    
    protected override async Task OnInitializedAsync()
    {
        var options = MudDialog.Options with
        {
            CloseButton = true
        };
        
        await MudDialog.SetOptionsAsync(options);
        await base.OnInitializedAsync();
    }
    
    private void OnValidSubmit(EditContext context)
    {
        MudDialog.Close(Owner);
    }
}