@inherits RxBLServiceSubscriber<DexieCloudService>

<MudMenu Disabled=@(!_users.Any())>
    <ActivatorContent>
        <MudIconButton Icon="@Icons.Material.Outlined.People" Color="Color.Inherit">
            "Sign in or create your account"
        </MudIconButton>
    </ActivatorContent>
    <ChildContent>
        @if (Service.UserLogin.HasValue() && Service.UserLogin.Value.IsLoggedIn)
        {
            <MudMenuItem Disabled=@(Service.SyncState.Value?.Status is not SyncState.SyncStatus.CONNECTED)
                         OnClick=@(() => LogoutDialog(Service.UserLogin.Value.UserId))>
                Sign Out: @Service.UserLogin.Value.UserId
            </MudMenuItem>
        }
        else
        {
            foreach (var user in _users)
            {
                <MudMenuItemAsyncRx StateCommand=@Service.CommandAsync ExecuteAsyncCallback=@Login(user)>
                    @user
                </MudMenuItemAsyncRx>
            }

            <MudMenuItemAsyncRx StateCommand=@Service.CommandAsync ExecuteAsyncCallback=@Login()>
                Sign in / sign up yourself
            </MudMenuItemAsyncRx>
        }
    </ChildContent>
</MudMenu>


@code {
    [Inject] public required IDialogService DialogService { get; init; }

    [Inject] public required ISnackbar Snackbar { get; init; }

    [Inject] public required IConfiguration Configuration { get; init; }

    private IEnumerable<string> _users = [];

    protected override void OnInitialized()
    {
        _users = Configuration.GetUsers();
    }

    private Func<IStateCommandAsync, Task> Login(string? eMail = null) => async _ =>
    {
        string? error = null;

        if (eMail is not null)
        {
            LoginInformation li = new(eMail, null, GrantType.DEMO);
            error = await Service.Login(li);
        }
        else
        {
            EmailData data = new("email@mydomain.com");

            var parameters = new DialogParameters { ["Item"] = data };
            var dialog = await DialogService.ShowAsync<AuthenticateEMail>("Email for Login", parameters);

            var result = await dialog.Result;
            if (result.TryGet<EmailData>(out var newData))
            {
                LoginInformation li = new(newData.Email, null, GrantType.OTP);
                error = await Service.Login(li);
            }
        }

        if (error is not null)
        {
            Snackbar.Add(error, Severity.Error);
        }
    };

    private async Task<bool> LogoutDialog(string userID)
    {
        return await DialogAsyncORx<DexieCloudService>.Show(Service, DialogService, Service.LogoutObserver, Service.LogoutObservable,
            $"Logout", $"Logout {userID}?", $"Logout", "Cancel", true, "Cancel Logout!", Color.Error);
    }
}